/*
 * This file is generated by jOOQ.
 */
package emented.jooq.keys


import emented.jooq.tables.Category
import emented.jooq.tables.Community
import emented.jooq.tables.Role
import emented.jooq.tables.RoleUserRelation
import emented.jooq.tables.User
import emented.jooq.tables.records.CategoryRecord
import emented.jooq.tables.records.CommunityRecord
import emented.jooq.tables.records.RoleRecord
import emented.jooq.tables.records.RoleUserRelationRecord
import emented.jooq.tables.records.UserRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val CATEGORY_PKEY: UniqueKey<CategoryRecord> = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_pkey"), arrayOf(Category.CATEGORY.ID), true)
val COMMUNITY_ADDRESS_KEY: UniqueKey<CommunityRecord> = Internal.createUniqueKey(Community.COMMUNITY, DSL.name("community_address_key"), arrayOf(Community.COMMUNITY.ADDRESS), true)
val COMMUNITY_PKEY: UniqueKey<CommunityRecord> = Internal.createUniqueKey(Community.COMMUNITY, DSL.name("community_pkey"), arrayOf(Community.COMMUNITY.ID), true)
val ROLE_NAME_KEY: UniqueKey<RoleRecord> = Internal.createUniqueKey(Role.ROLE, DSL.name("role_name_key"), arrayOf(Role.ROLE.NAME), true)
val ROLE_PKEY: UniqueKey<RoleRecord> = Internal.createUniqueKey(Role.ROLE, DSL.name("role_pkey"), arrayOf(Role.ROLE.ID), true)
val ROLE_USER_RELATION_USER_ID_ROLE_ID_KEY: UniqueKey<RoleUserRelationRecord> = Internal.createUniqueKey(RoleUserRelation.ROLE_USER_RELATION, DSL.name("role_user_relation_user_id_role_id_key"), arrayOf(RoleUserRelation.ROLE_USER_RELATION.USER_ID, RoleUserRelation.ROLE_USER_RELATION.ROLE_ID), true)
val USER_EMAIL_KEY: UniqueKey<UserRecord> = Internal.createUniqueKey(User.USER, DSL.name("user_email_key"), arrayOf(User.USER.EMAIL), true)
val USER_PKEY: UniqueKey<UserRecord> = Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), arrayOf(User.USER.ID), true)
val USER_USERNAME_KEY: UniqueKey<UserRecord> = Internal.createUniqueKey(User.USER, DSL.name("user_username_key"), arrayOf(User.USER.USERNAME), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val COMMUNITY__COMMUNITY_CATEGORY_ID_FKEY: ForeignKey<CommunityRecord, CategoryRecord> = Internal.createForeignKey(Community.COMMUNITY, DSL.name("community_category_id_fkey"), arrayOf(Community.COMMUNITY.CATEGORY_ID), emented.jooq.keys.CATEGORY_PKEY, arrayOf(Category.CATEGORY.ID), true)
val COMMUNITY__COMMUNITY_USER_ID_FKEY: ForeignKey<CommunityRecord, UserRecord> = Internal.createForeignKey(Community.COMMUNITY, DSL.name("community_user_id_fkey"), arrayOf(Community.COMMUNITY.USER_ID), emented.jooq.keys.USER_PKEY, arrayOf(User.USER.ID), true)
val ROLE_USER_RELATION__FK_ROLE_USER_RELATION_ROLE_ID: ForeignKey<RoleUserRelationRecord, RoleRecord> = Internal.createForeignKey(RoleUserRelation.ROLE_USER_RELATION, DSL.name("fk_role_user_relation_role_id"), arrayOf(RoleUserRelation.ROLE_USER_RELATION.ROLE_ID), emented.jooq.keys.ROLE_PKEY, arrayOf(Role.ROLE.ID), true)
val ROLE_USER_RELATION__FK_ROLE_USER_RELATION_USER_ID: ForeignKey<RoleUserRelationRecord, UserRecord> = Internal.createForeignKey(RoleUserRelation.ROLE_USER_RELATION, DSL.name("fk_role_user_relation_user_id"), arrayOf(RoleUserRelation.ROLE_USER_RELATION.USER_ID), emented.jooq.keys.USER_PKEY, arrayOf(User.USER.ID), true)
