/*
 * This file is generated by jOOQ.
 */
package emented.jooq.tables


import emented.jooq.Public
import emented.jooq.keys.ROLE_USER_RELATION_USER_ID_ROLE_ID_KEY
import emented.jooq.keys.ROLE_USER_RELATION__FK_ROLE_USER_RELATION_ROLE_ID
import emented.jooq.keys.ROLE_USER_RELATION__FK_ROLE_USER_RELATION_USER_ID
import emented.jooq.tables.Role.RolePath
import emented.jooq.tables.User.UserPath
import emented.jooq.tables.records.RoleUserRelationRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RoleUserRelation(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, RoleUserRelationRecord>?,
    parentPath: InverseForeignKey<out Record, RoleUserRelationRecord>?,
    aliased: Table<RoleUserRelationRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<RoleUserRelationRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.role_user_relation</code>
         */
        val ROLE_USER_RELATION: RoleUserRelation = RoleUserRelation()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RoleUserRelationRecord> = RoleUserRelationRecord::class.java

    /**
     * The column <code>public.role_user_relation.user_id</code>.
     */
    val USER_ID: TableField<RoleUserRelationRecord, Long?> = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.role_user_relation.role_id</code>.
     */
    val ROLE_ID: TableField<RoleUserRelationRecord, Long?> = createField(DSL.name("role_id"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<RoleUserRelationRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<RoleUserRelationRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<RoleUserRelationRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.role_user_relation</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.role_user_relation</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.role_user_relation</code> table reference
     */
    constructor(): this(DSL.name("role_user_relation"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, RoleUserRelationRecord>?, parentPath: InverseForeignKey<out Record, RoleUserRelationRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, ROLE_USER_RELATION, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class RoleUserRelationPath : RoleUserRelation, Path<RoleUserRelationRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, RoleUserRelationRecord>?, parentPath: InverseForeignKey<out Record, RoleUserRelationRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<RoleUserRelationRecord>): super(alias, aliased)
        override fun `as`(alias: String): RoleUserRelationPath = RoleUserRelationPath(DSL.name(alias), this)
        override fun `as`(alias: Name): RoleUserRelationPath = RoleUserRelationPath(alias, this)
        override fun `as`(alias: Table<*>): RoleUserRelationPath = RoleUserRelationPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getUniqueKeys(): List<UniqueKey<RoleUserRelationRecord>> = listOf(ROLE_USER_RELATION_USER_ID_ROLE_ID_KEY)
    override fun getReferences(): List<ForeignKey<RoleUserRelationRecord, *>> = listOf(ROLE_USER_RELATION__FK_ROLE_USER_RELATION_USER_ID, ROLE_USER_RELATION__FK_ROLE_USER_RELATION_ROLE_ID)

    private lateinit var _user: UserPath

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    fun user(): UserPath {
        if (!this::_user.isInitialized)
            _user = UserPath(this, ROLE_USER_RELATION__FK_ROLE_USER_RELATION_USER_ID, null)

        return _user;
    }

    val user: UserPath
        get(): UserPath = user()

    private lateinit var _role: RolePath

    /**
     * Get the implicit join path to the <code>public.role</code> table.
     */
    fun role(): RolePath {
        if (!this::_role.isInitialized)
            _role = RolePath(this, ROLE_USER_RELATION__FK_ROLE_USER_RELATION_ROLE_ID, null)

        return _role;
    }

    val role: RolePath
        get(): RolePath = role()
    override fun `as`(alias: String): RoleUserRelation = RoleUserRelation(DSL.name(alias), this)
    override fun `as`(alias: Name): RoleUserRelation = RoleUserRelation(alias, this)
    override fun `as`(alias: Table<*>): RoleUserRelation = RoleUserRelation(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RoleUserRelation = RoleUserRelation(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RoleUserRelation = RoleUserRelation(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RoleUserRelation = RoleUserRelation(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): RoleUserRelation = RoleUserRelation(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): RoleUserRelation = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): RoleUserRelation = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): RoleUserRelation = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): RoleUserRelation = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): RoleUserRelation = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): RoleUserRelation = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): RoleUserRelation = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): RoleUserRelation = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): RoleUserRelation = where(DSL.notExists(select))
}
