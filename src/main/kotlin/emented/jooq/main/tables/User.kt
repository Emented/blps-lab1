/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main.tables


import emented.jooq.main.Public
import emented.jooq.main.keys.COMMENT__COMMENT_USER_ID_FKEY
import emented.jooq.main.keys.COMMUNITY_EVENT__COMMUNITY_EVENT_USER_ID_FKEY
import emented.jooq.main.keys.COMMUNITY__COMMUNITY_USER_ID_FKEY
import emented.jooq.main.keys.ROLE_USER_RELATION__FK_ROLE_USER_RELATION_USER_ID
import emented.jooq.main.keys.USER_EMAIL_KEY
import emented.jooq.main.keys.USER_PKEY
import emented.jooq.main.keys.USER_USERNAME_KEY
import emented.jooq.main.tables.Comment.CommentPath
import emented.jooq.main.tables.Community.CommunityPath
import emented.jooq.main.tables.CommunityEvent.CommunityEventPath
import emented.jooq.main.tables.Role.RolePath
import emented.jooq.main.tables.RoleUserRelation.RoleUserRelationPath
import emented.jooq.main.tables.records.UserRecord

import java.time.LocalDate

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class User(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, UserRecord>?,
    parentPath: InverseForeignKey<out Record, UserRecord>?,
    aliased: Table<UserRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<UserRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.user</code>
         */
        val USER: User = User()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserRecord> = UserRecord::class.java

    /**
     * The column <code>public.user.id</code>.
     */
    val ID: TableField<UserRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.user.email</code>.
     */
    val EMAIL: TableField<UserRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.user.username</code>.
     */
    val USERNAME: TableField<UserRecord, String?> = createField(DSL.name("username"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.user.password</code>.
     */
    val PASSWORD: TableField<UserRecord, String?> = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.user.birth_date</code>.
     */
    val BIRTH_DATE: TableField<UserRecord, LocalDate?> = createField(DSL.name("birth_date"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>public.user.activity</code>.
     */
    val ACTIVITY: TableField<UserRecord, Long?> = createField(DSL.name("activity"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<UserRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<UserRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<UserRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.user</code> table reference
     */
    constructor(): this(DSL.name("user"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UserRecord>?, parentPath: InverseForeignKey<out Record, UserRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, USER, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class UserPath : User, Path<UserRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UserRecord>?, parentPath: InverseForeignKey<out Record, UserRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<UserRecord>): super(alias, aliased)
        override fun `as`(alias: String): UserPath = UserPath(DSL.name(alias), this)
        override fun `as`(alias: Name): UserPath = UserPath(alias, this)
        override fun `as`(alias: Table<*>): UserPath = UserPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<UserRecord, Long?> = super.getIdentity() as Identity<UserRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<UserRecord> = USER_PKEY
    override fun getUniqueKeys(): List<UniqueKey<UserRecord>> = listOf(USER_EMAIL_KEY, USER_USERNAME_KEY)

    private lateinit var _comment: CommentPath

    /**
     * Get the implicit to-many join path to the <code>public.comment</code>
     * table
     */
    fun comment(): CommentPath {
        if (!this::_comment.isInitialized)
            _comment = CommentPath(this, null, COMMENT__COMMENT_USER_ID_FKEY.inverseKey)

        return _comment;
    }

    val comment: CommentPath
        get(): CommentPath = comment()

    private lateinit var _community: CommunityPath

    /**
     * Get the implicit to-many join path to the <code>public.community</code>
     * table
     */
    fun community(): CommunityPath {
        if (!this::_community.isInitialized)
            _community = CommunityPath(this, null, COMMUNITY__COMMUNITY_USER_ID_FKEY.inverseKey)

        return _community;
    }

    val community: CommunityPath
        get(): CommunityPath = community()

    private lateinit var _communityEvent: CommunityEventPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.community_event</code> table
     */
    fun communityEvent(): CommunityEventPath {
        if (!this::_communityEvent.isInitialized)
            _communityEvent = CommunityEventPath(this, null, COMMUNITY_EVENT__COMMUNITY_EVENT_USER_ID_FKEY.inverseKey)

        return _communityEvent;
    }

    val communityEvent: CommunityEventPath
        get(): CommunityEventPath = communityEvent()

    private lateinit var _roleUserRelation: RoleUserRelationPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.role_user_relation</code> table
     */
    fun roleUserRelation(): RoleUserRelationPath {
        if (!this::_roleUserRelation.isInitialized)
            _roleUserRelation = RoleUserRelationPath(this, null, ROLE_USER_RELATION__FK_ROLE_USER_RELATION_USER_ID.inverseKey)

        return _roleUserRelation;
    }

    val roleUserRelation: RoleUserRelationPath
        get(): RoleUserRelationPath = roleUserRelation()

    /**
     * Get the implicit many-to-many join path to the <code>public.role</code>
     * table
     */
    val role: RolePath
        get(): RolePath = roleUserRelation().role()
    override fun `as`(alias: String): User = User(DSL.name(alias), this)
    override fun `as`(alias: Name): User = User(alias, this)
    override fun `as`(alias: Table<*>): User = User(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): User = User(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): User = User(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): User = User(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): User = User(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): User = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): User = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): User = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): User = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): User = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): User = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): User = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): User = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): User = where(DSL.notExists(select))
}
