/*
 * This file is generated by jOOQ.
 */
package emented.jooq.main


import emented.jooq.main.tables.Category
import emented.jooq.main.tables.Comment
import emented.jooq.main.tables.Community
import emented.jooq.main.tables.CommunityEvent
import emented.jooq.main.tables.QrtzBlobTriggers
import emented.jooq.main.tables.QrtzCalendars
import emented.jooq.main.tables.QrtzCronTriggers
import emented.jooq.main.tables.QrtzFiredTriggers
import emented.jooq.main.tables.QrtzJobDetails
import emented.jooq.main.tables.QrtzLocks
import emented.jooq.main.tables.QrtzPausedTriggerGrps
import emented.jooq.main.tables.QrtzSchedulerState
import emented.jooq.main.tables.QrtzSimpleTriggers
import emented.jooq.main.tables.QrtzSimpropTriggers
import emented.jooq.main.tables.QrtzTriggers
import emented.jooq.main.tables.Role
import emented.jooq.main.tables.RoleUserRelation
import emented.jooq.main.tables.User

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Public : SchemaImpl("public", DefaultCatalog.DEFAULT_CATALOG) {
    public companion object {

        /**
         * The reference instance of <code>public</code>
         */
        val PUBLIC: Public = Public()
    }

    /**
     * The table <code>public.category</code>.
     */
    val CATEGORY: Category get() = Category.CATEGORY

    /**
     * The table <code>public.comment</code>.
     */
    val COMMENT: Comment get() = Comment.COMMENT

    /**
     * The table <code>public.community</code>.
     */
    val COMMUNITY: Community get() = Community.COMMUNITY

    /**
     * The table <code>public.community_event</code>.
     */
    val COMMUNITY_EVENT: CommunityEvent get() = CommunityEvent.COMMUNITY_EVENT

    /**
     * The table <code>public.qrtz_blob_triggers</code>.
     */
    val QRTZ_BLOB_TRIGGERS: QrtzBlobTriggers get() = QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS

    /**
     * The table <code>public.qrtz_calendars</code>.
     */
    val QRTZ_CALENDARS: QrtzCalendars get() = QrtzCalendars.QRTZ_CALENDARS

    /**
     * The table <code>public.qrtz_cron_triggers</code>.
     */
    val QRTZ_CRON_TRIGGERS: QrtzCronTriggers get() = QrtzCronTriggers.QRTZ_CRON_TRIGGERS

    /**
     * The table <code>public.qrtz_fired_triggers</code>.
     */
    val QRTZ_FIRED_TRIGGERS: QrtzFiredTriggers get() = QrtzFiredTriggers.QRTZ_FIRED_TRIGGERS

    /**
     * The table <code>public.qrtz_job_details</code>.
     */
    val QRTZ_JOB_DETAILS: QrtzJobDetails get() = QrtzJobDetails.QRTZ_JOB_DETAILS

    /**
     * The table <code>public.qrtz_locks</code>.
     */
    val QRTZ_LOCKS: QrtzLocks get() = QrtzLocks.QRTZ_LOCKS

    /**
     * The table <code>public.qrtz_paused_trigger_grps</code>.
     */
    val QRTZ_PAUSED_TRIGGER_GRPS: QrtzPausedTriggerGrps get() = QrtzPausedTriggerGrps.QRTZ_PAUSED_TRIGGER_GRPS

    /**
     * The table <code>public.qrtz_scheduler_state</code>.
     */
    val QRTZ_SCHEDULER_STATE: QrtzSchedulerState get() = QrtzSchedulerState.QRTZ_SCHEDULER_STATE

    /**
     * The table <code>public.qrtz_simple_triggers</code>.
     */
    val QRTZ_SIMPLE_TRIGGERS: QrtzSimpleTriggers get() = QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS

    /**
     * The table <code>public.qrtz_simprop_triggers</code>.
     */
    val QRTZ_SIMPROP_TRIGGERS: QrtzSimpropTriggers get() = QrtzSimpropTriggers.QRTZ_SIMPROP_TRIGGERS

    /**
     * The table <code>public.qrtz_triggers</code>.
     */
    val QRTZ_TRIGGERS: QrtzTriggers get() = QrtzTriggers.QRTZ_TRIGGERS

    /**
     * The table <code>public.role</code>.
     */
    val ROLE: Role get() = Role.ROLE

    /**
     * The table <code>public.role_user_relation</code>.
     */
    val ROLE_USER_RELATION: RoleUserRelation get() = RoleUserRelation.ROLE_USER_RELATION

    /**
     * The table <code>public.user</code>.
     */
    val USER: User get() = User.USER

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        Category.CATEGORY,
        Comment.COMMENT,
        Community.COMMUNITY,
        CommunityEvent.COMMUNITY_EVENT,
        QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS,
        QrtzCalendars.QRTZ_CALENDARS,
        QrtzCronTriggers.QRTZ_CRON_TRIGGERS,
        QrtzFiredTriggers.QRTZ_FIRED_TRIGGERS,
        QrtzJobDetails.QRTZ_JOB_DETAILS,
        QrtzLocks.QRTZ_LOCKS,
        QrtzPausedTriggerGrps.QRTZ_PAUSED_TRIGGER_GRPS,
        QrtzSchedulerState.QRTZ_SCHEDULER_STATE,
        QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS,
        QrtzSimpropTriggers.QRTZ_SIMPROP_TRIGGERS,
        QrtzTriggers.QRTZ_TRIGGERS,
        Role.ROLE,
        RoleUserRelation.ROLE_USER_RELATION,
        User.USER
    )
}
